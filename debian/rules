#!/usr/bin/make -f

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# Value of the calligra:{Depends,Recommends,Suggests,Replaces,Breaks,Provides}
# substvars. Common relationships for each l10n package. 
L10N_Depends :=
L10N_Recommends :=
L10N_Suggests := calligra
L10N_Replaces :=
L10N_Breaks :=
L10N_Provides := calligra-l10n

L10N_PREFIX := calligra-l10n
L10N_VERSION := $(shell cat debian/changelog | head -n1 | sed 's/.*(\([[:digit:]]\+:\)\?\(.\+\)-.\+).*/\2/')
L10N_DIRS := $(subst .tar.bz2,,$(wildcard $(L10N_PREFIX)-*-$(L10N_VERSION).tar.bz2))
L10N_LANGS := $(patsubst $(L10N_PREFIX)-%-$(L10N_VERSION),%,$(L10N_DIRS))
L10N_PACKAGES :=$(patsubst %,$(L10N_PREFIX)-%,$(shell echo $(subst _,,$(subst @,,$(L10N_LANGS))) | tr A-Z a-z))
L10N_PATCHES := $(wildcard debian/patches/*.diff)

# Support variables to be used in targets
cur_lang = $(word 2,$(subst __, ,$@))
cur_lang_dir = $(patsubst %,$(L10N_PREFIX)-%-$(L10N_VERSION),$(cur_lang))
cur_lang_patch = $(patsubst %,debian/patches/%.diff,$(cur_lang))
cur_pkg = $(L10N_PREFIX)-$(shell echo $(subst _,,$(subst @,,$(cur_lang))) | tr A-Z a-z)

# Stamps
STAMP_EXTRACT := $(patsubst %,debian/stamp__%__extract,$(L10N_LANGS))
STAMP_PATCH := $(patsubst debian/patches/%.diff,debian/stamp__%__patch,$(L10N_PATCHES))
STAMP_BUILD := $(patsubst %,debian/stamp__%__build,$(L10N_LANGS))
L10N_INSTALL := $(patsubst %,install__%,$(L10N_LANGS))

# debian/control checks
L10N_PACKAGES_IN_CONTROL := $(shell grep '^Package: ' debian/control | sed 's/^Package: //')
L10N_NOTEXIST_IN_CONTROL := $(filter-out $(L10N_PACKAGES_IN_CONTROL),$(L10N_PACKAGES))
L10N_EXCESS_IN_CONTROL := $(filter-out $(L10N_PACKAGES),$(L10N_PACKAGES_IN_CONTROL))

check_control:
	@test -z "$(L10N_NOTEXIST_IN_CONTROL)" || \
		(echo "-- ERROR: debian/control is missing language packages: $(L10N_NOTEXIST_IN_CONTROL)" && false)
	@test -z "$(L10N_EXCESS_IN_CONTROL)" || \
		(echo "-- ERROR: debian/control has excess language packages: $(L10N_EXCESS_IN_CONTROL)" && false)


patch: $(STAMP_PATCH)

$(STAMP_PATCH):
	# Applying patch for the '$(cur_lang)' language ...
	cd $(cur_lang_dir) && patch --set-utc -p1 < "$(CURDIR)/$(cur_lang_patch)" > $(CURDIR)/$@_log
	mv $@_log $@

build:: build-arch build-indep
build-arch: build-stamp
build-indep: build-stamp
build-stamp:
	dh_testdir

build:: check_control $(STAMP_EXTRACT) patch $(STAMP_BUILD)

$(STAMP_EXTRACT):
	tar xfj $(cur_lang_dir).tar.bz2
	@touch $@

$(STAMP_BUILD):
	# Building the '$(cur_lang)' language ...
	cd $(cur_lang_dir) && cmake . -DCMAKE_INSTALL_PREFIX="/usr" -DCMAKE_VERBOSE_MAKEFILE=ON && $(MAKE)
	touch $@


install::
	dh_testdir
	dh_testroot
	dh_prep

install:: $(L10N_INSTALL)
	# Installed successfully

$(L10N_INSTALL):
	# Installing '$(cur_lang)' to the '$(cur_pkg)' package
	cd $(cur_lang_dir) && $(MAKE) install DESTDIR=$(CURDIR)/debian/$(cur_pkg)

clean: debian-clean
debian-clean:
	dh_testdir
	# delete unpacked bzip2 languages
	rm -rf $(L10N_PREFIX)-*-$(L10N_VERSION)/ debian/$(L10N_PREFIX)-*
	rm -f debian/stamp__*
	rm -f debian/*.debhelper.log
	dh_clean

binary-arch:
	# No architecture dependent files available

binary-indep: build install
	dh_testroot
	dh_testdir
	dh_installdocs
	dh_installmenu
	dh_installchangelogs
	dh_strip
	dh_compress -X.docbook -X.css -X-license -X.dcl -X.bz2
	dh_link
	dh_fixperms
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol -- $(foreach rel,Depends Recommends Suggests Replaces Breaks Provides,-V'calligra:$(rel)=$(L10N_$(rel))')
	dh_md5sums
	dh_builddeb -- -Zxz

# Below here is fairly generic really
binary: binary-indep binary-arch

.PHONY: binary binary-arch binary-indep clean patch build install
.PHONY: check_control $(L10N_INSTALL)
